/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface ICompaniesClient {
    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest, authorization?: string | undefined): Promise<AuthenticateResponse>;
    /**
     * Registers a user
     * @param model UserRegister user model
     * @return Ok response
     */
    register(model: User, authorization?: string | undefined): Promise<string>;
}

export class CompaniesClient implements ICompaniesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest, authorization?: string | undefined): Promise<AuthenticateResponse> {
        let url_ = this.baseUrl + "/Companies/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AuthenticateResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AuthenticateResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateResponse>(<any>null);
    }

    /**
     * Registers a user
     * @param model UserRegister user model
     * @param authorization (optional) This is a test header
     * @return Ok response
     */
    register(model: User, authorization?: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Companies/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface IUsersClient {
    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest, authorization?: string | undefined): Promise<AuthenticateResponse>;
    /**
     * Gets user by given id
     * @param id String User id
     * @param authorization (optional) This is a test header
     * @return User model
     */
    getUserById(id: string | null, authorization?: string | undefined): Promise<UserItem>;
    /**
     * Authenticates the given login request
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    test(authorization?: string | undefined): Promise<string>;
    /**
     * Registers a user
     * @param model UserRegister user model
     * @param authorization (optional) This is a test header
     * @return Ok response with message
     */
    register(model: User, authorization?: string | undefined): Promise<string>;
}

export class UsersClient implements IUsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest, authorization?: string | undefined): Promise<AuthenticateResponse> {
        let url_ = this.baseUrl + "/Users/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AuthenticateResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AuthenticateResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateResponse>(<any>null);
    }

    /**
     * Gets user by given id
     * @param id String User id
     * @param authorization (optional) This is a test header
     * @return User model
     */
    getUserById(id: string | null, authorization?: string | undefined): Promise<UserItem> {
        let url_ = this.baseUrl + "/Users/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<UserItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <UserItem>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserItem>(<any>null);
    }

    /**
     * Authenticates the given login request
     * @param authorization (optional) This is a test header
     * @return Authentication response
     */
    test(authorization?: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Users/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTest(_response);
        });
    }

    protected processTest(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Registers a user
     * @param model UserRegister user model
     * @param authorization (optional) This is a test header
     * @return Ok response with message
     */
    register(model: User, authorization?: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Users/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

/** Representes authentication response */
export interface AuthenticateResponse {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets user role */
    userRole?: UserRole;
    /** Gets or sets Token */
    tokenProvider?: TokenProvider | undefined;
}

/** Representes enumeration user roles */
export enum UserRole {
    Administrator = "Administrator",
    User = "User",
    Company = "Company",
}

/** Represents token provider */
export interface TokenProvider {
    /** Gets or sets token */
    token?: string | undefined;
    /** Gets or sets token expiration in seconds */
    expiresInSeconds?: number;
}

/** Represents authentication request */
export interface AuthenticateRequest {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets ot sets password */
    password?: string | undefined;
}

/** Representes user */
export interface User {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets email */
    email?: string | undefined;
    /** Gets or sets user role */
    role?: UserRole;
    /** Gets or sets full name */
    fullName?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;
}

export interface UserItem {
    /** Gets or sets user id */
    id?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets email */
    email?: string | undefined;
    /** Gets or sets user role */
    role?: UserRole;
    /** Gets or sets full name */
    fullName?: string | undefined;
}

export class ClientException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isClientException = true;

    static isClientException(obj: any): obj is ClientException {
        return obj.isClientException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ClientException(message, status, response, headers, null);
}