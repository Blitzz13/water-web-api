/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IGamesClient {
    /**
     * Creates a game
     * @param model AddGameRequest Add game request
     * @return Game object
     */
    addGame(model: AddGameRequest): Promise<string>;
    /**
     * Updates a game
     * @param model UpdateGameRequest Update game request
     * @return Game object
     */
    updateGame(model: UpdateGameRequest): Promise<string>;
    /**
     * Removes a game from the database
     * @param id StringUser Id
     * @return Game object
     */
    removeGame(id: string | null): Promise<FileResponse>;
    /**
     * Gets game by given id
     * @param id String Game id
     * @return Game object
     */
    getGameById(id: string | null): Promise<Game>;
    /**
     * Returns the purchased games for the given user id
     * @param id String User id
     * @return Enumeration of game items
     */
    listUserGames(id: string | null): Promise<GameItem[]>;
    /**
     * Returns the purchased games for the given user id
     * @param filter GameFilter Game filter
     * @return Enumeration of game items
     */
    listGameItems(filter: GameFilter): Promise<GameItem[]>;
}

export class GamesClient implements IGamesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    /**
     * Creates a game
     * @param model AddGameRequest Add game request
     * @return Game object
     */
    addGame(model: AddGameRequest): Promise<string> {
        let url_ = this.baseUrl + "/Games/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddGame(_response);
        });
    }

    protected processAddGame(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Updates a game
     * @param model UpdateGameRequest Update game request
     * @return Game object
     */
    updateGame(model: UpdateGameRequest): Promise<string> {
        let url_ = this.baseUrl + "/Games/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateGame(_response);
        });
    }

    protected processUpdateGame(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Removes a game from the database
     * @param id StringUser Id
     * @return Game object
     */
    removeGame(id: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/Games/Remove/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveGame(_response);
        });
    }

    protected processRemoveGame(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Gets game by given id
     * @param id String Game id
     * @return Game object
     */
    getGameById(id: string | null): Promise<Game> {
        let url_ = this.baseUrl + "/Games/Game/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGameById(_response);
        });
    }

    protected processGetGameById(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Game>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(<any>null);
    }

    /**
     * Returns the purchased games for the given user id
     * @param id String User id
     * @return Enumeration of game items
     */
    listUserGames(id: string | null): Promise<GameItem[]> {
        let url_ = this.baseUrl + "/Games/User/Games/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListUserGames(_response);
        });
    }

    protected processListUserGames(response: Response): Promise<GameItem[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GameItem[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GameItem[]>(<any>null);
    }

    /**
     * Returns the purchased games for the given user id
     * @param filter GameFilter Game filter
     * @return Enumeration of game items
     */
    listGameItems(filter: GameFilter): Promise<GameItem[]> {
        let url_ = this.baseUrl + "/Games/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListGameItems(_response);
        });
    }

    protected processListGameItems(response: Response): Promise<GameItem[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GameItem[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GameItem[]>(<any>null);
    }
}

export interface IUsersClient {
    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest): Promise<AuthenticateResponse>;
    /**
     * Gets user by given id
     * @param id String User id
     * @return User model
     */
    getUserById(id: string | null): Promise<UserItem>;
    /**
     * Authenticates the given login request
     * @return Authentication response
     */
    test(): Promise<string>;
    /**
     * Registers a user
     * @param model UserRegister user model
     * @return Ok response with message
     */
    register(model: User): Promise<FileResponse>;
    /**
     * Adds a game to the user games enumeration
     * @param request BuyGameRequestRegister user model
     * @return Ok response
     */
    buyGame(request: BuyGameRequest): Promise<void>;
}

export class UsersClient implements IUsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    /**
     * Authenticates the given login request
     * @param model AuthenticateRequestAuthentication request model
     * @return Authentication response
     */
    authenticate(model: AuthenticateRequest): Promise<AuthenticateResponse> {
        let url_ = this.baseUrl + "/Users/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AuthenticateResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AuthenticateResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateResponse>(<any>null);
    }

    /**
     * Gets user by given id
     * @param id String User id
     * @return User model
     */
    getUserById(id: string | null): Promise<UserItem> {
        let url_ = this.baseUrl + "/Users/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<UserItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <UserItem>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserItem>(<any>null);
    }

    /**
     * Authenticates the given login request
     * @return Authentication response
     */
    test(): Promise<string> {
        let url_ = this.baseUrl + "/Users/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTest(_response);
        });
    }

    protected processTest(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Registers a user
     * @param model UserRegister user model
     * @return Ok response with message
     */
    register(model: User): Promise<FileResponse> {
        let url_ = this.baseUrl + "/Users/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Adds a game to the user games enumeration
     * @param request BuyGameRequestRegister user model
     * @return Ok response
     */
    buyGame(request: BuyGameRequest): Promise<void> {
        let url_ = this.baseUrl + "/Users/Buy/Game";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBuyGame(_response);
        });
    }

    protected processBuyGame(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

/** Represents add game request */
export interface AddGameRequest {
    /** Gets or sets name */
    name?: string | undefined;
    /** Gets or sets description */
    description?: string | undefined;
    /** Gets or sets price */
    price?: number;
    /** Gets or sets rating */
    rating?: number;
    /** Gets or sets state */
    state?: GameState;
    /** Gets or sets cover image */
    coverImage?: string | undefined;
    /** Gets or sets image urls */
    imageUrls?: string[] | undefined;
    /** Gets or sets genre */
    genre?: Genre;
    /** Gets or sets is featured */
    isFeatured?: boolean;
    /** Gets or sets compamy name */
    companyName?: string | undefined;
}

/** Representes enumeration of game states */
export enum GameState {
    Released = "Released",
    EarlyAccess = "EarlyAccess",
    Preorder = "Preorder",
}

/** Representes enumeration of game genres */
export enum Genre {
    Cooperative = "Cooperative",
    Action = "Action",
    ActionAdventure = "ActionAdventure",
    Adventure = "Adventure",
    Rpg = "Rpg",
    Simulation = "Simulation",
    Strategy = "Strategy",
    Sport = "Sport",
}

/** Represents add game request */
export interface UpdateGameRequest {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets name */
    name?: string | undefined;
    /** Gets or sets description */
    description?: string | undefined;
    /** Gets or sets price */
    price?: number;
    /** Gets or sets rating */
    rating?: number;
    /** Gets or sets state */
    state?: GameState;
    /** Gets or sets cover image */
    coverImage?: string | undefined;
    /** Gets or sets image urls */
    imageUrls?: string[] | undefined;
    /** Gets or sets genre */
    genre?: Genre;
    /** Gets or sets is featured */
    isFeatured?: boolean;
    /** Gets or sets compamy name */
    companyName?: string | undefined;
}

export interface Game {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets name */
    name?: string | undefined;
    /** Gets or sets description */
    description?: string | undefined;
    /** Gets or sets price */
    price?: number;
    /** Gets or sets rating */
    rating?: number;
    /** Gets or sets reviews */
    reviews?: Review[] | undefined;
    /** Gets or sets state */
    state?: GameState;
    /** Gets or sets cover image */
    coverImage?: string | undefined;
    /** Gets or sets image urls */
    imageUrls?: string[] | undefined;
    /** Gets or sets genre */
    genre?: Genre;
    /** Gets or sets is featured */
    isFeatured?: boolean;
    /** Gets or sets company name */
    companyName?: string | undefined;
}

/** Represents review */
export interface Review {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets content */
    content?: string | undefined;
    /** Gets or sets user id */
    userId?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets upvotes */
    upvotes?: number;
}

/** Represents game item */
export interface GameItem {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets price */
    price?: number;
    /** Gets or sets rating */
    rating?: number;
    /** Gets or sets cover image */
    coverImage?: string | undefined;
    /** Gets or sets is featured */
    isFeatured?: boolean;
}

/** Represents game filter */
export interface GameFilter {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets name */
    name?: string | undefined;
    /** Gets or sets is featured */
    isFeatured?: boolean;
    /** Gets or sets genres */
    genres?: Genre[] | undefined;
    /** Gets or sets states */
    states?: GameState[] | undefined;
}

/** Representes authentication response */
export interface AuthenticateResponse {
    /** Gets or sets id */
    id?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets user role */
    userRole?: UserRole;
    /** Gets or sets Token */
    tokenProvider?: TokenProvider | undefined;
}

/** Representes enumeration user roles */
export enum UserRole {
    Administrator = "Administrator",
    User = "User",
    Company = "Company",
}

/** Represents token provider */
export interface TokenProvider {
    /** Gets or sets token */
    token?: string | undefined;
    /** Gets or sets token expiration in seconds */
    expiresInSeconds?: number;
}

/** Represents authentication request */
export interface AuthenticateRequest {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets ot sets password */
    password?: string | undefined;
}

/** Represents authentication request */
export interface UserItem {
    /** Gets or sets user id */
    id?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets email */
    email?: string | undefined;
    /** Gets or sets user role */
    role?: UserRole;
    /** Gets or sets full name */
    fullName?: string | undefined;
}

/** Representes user */
export interface User {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets email */
    email?: string | undefined;
    /** Gets or sets user role */
    role?: UserRole;
    /** Gets or sets full name */
    fullName?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;
}

/** Represents buy game request */
export interface BuyGameRequest {
    /** Gets or sets user id */
    userId?: string | undefined;
    /** Gets or sets game id */
    gameId?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ClientException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isClientException = true;

    static isClientException(obj: any): obj is ClientException {
        return obj.isClientException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ClientException(message, status, response, headers, null);
}